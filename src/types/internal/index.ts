import { RECEIPT_STATUS_ENUM } from '../../constants';

/*
    https://developer.apple.com/documentation/appstorereceipts/responsebody/receipt
    https://developer.apple.com/library/archive/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html#//apple_ref/doc/uid/TP40010573-CH106-SW1
 */
interface IReceipt {
    /*
        The bundle identifier for the app to which the receipt belongs.
        You provide this string on App Store Connect.
        This corresponds to the value of CFBundleIdentifier in the Info.plist file of the app.
     */
    bundle_id: string;
    /*
        The app’s version number.
        The app's version number corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS) in the Info.plist.
        In production, this value is the current version of the app on the device based on the receipt_creation_date_ms. In the sandbox, the value is always "1.0".
     */
    application_version: string;
    /*
        An array that contains the in-app purchase receipt fields for all in-app purchase transactions.
     */
    in_app: IReceiptInAppItem[];
    /*
        An array that contains the in-app purchase receipt fields for all in-app purchase transactions.
     */
    latest_receipt_info: IReceiptInAppItem[];
    /*
        The version of the app that the user originally purchased. This value does not change, and corresponds to the value of CFBundleVersion (in iOS) or CFBundleShortVersionString (in macOS) in the Info.plist file of the original purchase. In the sandbox environment, the value is always "1.0".
     */
    original_application_version: string;
    /*
        The time the App Store generated the receipt, in UNIX epoch time format, in milliseconds. Use this time format for processing dates. This value does not change.
     */
    receipt_creation_date_ms: string;
    /*
        The time the receipt expires for apps purchased through the Volume Purchase Program, in UNIX epoch time format, in milliseconds. If this key is not present for apps purchased through the Volume Purchase Program, the receipt does not expire. Use this time format for processing dates.
     */
    expiration_date_ms: string;
    /*
        The time of the original app purchase, in UNIX epoch time format, in milliseconds. Use this time format for processing dates.
     */
    original_purchase_date: string;
    /*
        Generated by App Store Connect and used by the App Store to uniquely identify the app purchased. Apps are assigned this identifier only in production. Treat this value as a 64-bit long integer.
     */
    app_item_id: string;
    /*
        An arbitrary number that identifies a revision of your app. In the sandbox, this key's value is “0”.
     */
    version_external_identifier: string;
    /*
        Subscription Expiration Date
        The expiration date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
        This key is only present for auto-renewable subscription receipts. Use this value to identify the date when the subscription will renew or expire, to determine if a customer should have access to content or service. After validating the latest receipt, if the subscription expiration date for the latest renewal transaction is a past date, it is safe to assume that the subscription has expired.
    */
    expires_date_ms?: string;
}

/*
    https://developer.apple.com/documentation/appstorereceipts/responsebody/receipt/in_app
 */
export interface IReceiptInAppItem {
    /*
        Quantity
        The number of items purchased.
     */
    quantity: string;
    /*
       Product Identifier
       The product identifier of the item that was purchased.
       The subscription they have decided to take, as set in App Store Connect
    */
    product_id: string;
    /*
        Transaction Identifier
        The transaction identifier of the item that was purchased.
     */
    transaction_id: string;
    /*
        Original Transaction Identifier
        For a transaction that restores a previous transaction, the transaction identifier of the original transaction. Otherwise, identical to the transaction identifier.
    */
    original_transaction_id: string;
    /*
        Purchase Date
        The date and time that the item was purchased.
        Type is string, interpreted as an RFC 3339 date
     */
    purchase_date: string;
    /*
        Purchase Date expressed in milliseconds
        The date and time that the item was purchased.
        The expiration date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    purchase_date_ms: string;
    /*
        Original Purchase Date
        For a transaction that restores a previous transaction, the date of the original transaction.
        Type is string, interpreted as an RFC 3339 date
     */
    original_purchase_date: string;
    /*
        Original Purchase Date  expressed in milliseconds
        For a transaction that restores a previous transaction, the date of the original transaction.
        The purchase date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    original_purchase_date_ms: string;
    /*
        Subscription Expiration Date
        Type is string, interpreted as an RFC 3339 date
        This key is only present for auto-renewable subscription receipts. Use this value to identify the date when the subscription will renew or expire, to determine if a customer should have access to content or service. After validating the latest receipt, if the subscription expiration date for the latest renewal transaction is a past date, it is safe to assume that the subscription has expired.
    */
    expires_date?: string;
    /*
        Subscription Expiration Date
        The expiration date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
        This key is only present for auto-renewable subscription receipts. Use this value to identify the date when the subscription will renew or expire, to determine if a customer should have access to content or service. After validating the latest receipt, if the subscription expiration date for the latest renewal transaction is a past date, it is safe to assume that the subscription has expired.
    */
    expires_date_ms?: string;
    /*
        Subscription Expiration Intent
        For an expired subscription, the reason for the subscription expiration.
        "1" - Customer canceled their subscription.
        "2" - Billing error; for example customer’s payment information was no longer valid.
        "3" - Customer did not agree to a recent price increase.
        "4" - Product was not available for purchase at the time of renewal.
        "5" - Unknown error.
        This key is only present for a receipt containing an expired auto-renewable subscription. You can use this value to decide whether to display appropriate messaging in your app for customers to resubscribe.
     */
    expiration_intent?: '1' | '2' | '3' | '4' | '5';
    /*
        Subscription Trial Period
        For a subscription, whether it is in the free trial period.

        This key is only present for auto-renewable subscription receipts. The value for this key is "true" if the customer’s subscription is currently in the free trial period, or "false" if not.
     */
    is_trial_period: string;
    /*
        Cancellation Date
        For a transaction that was canceled by Apple customer support, the time and date of the cancellation. For an auto-renewable subscription plan that was upgraded, the time and date of the upgrade transaction.
        Type is string, interpreted as an RFC 3339 date
     */
    cancellation_date?: string;
    /*
        Cancellation Date
        For a transaction that was canceled by Apple customer support, the time and date of the cancellation. For an auto-renewable subscription plan that was upgraded, the time and date of the upgrade transaction.
        The cancel date for the subscription, expressed as the number of milliseconds since January 1, 1970, 00:00:00 GMT.
     */
    cancellation_date_ms?: string;
    /*
        Cancellation Reason
        For a transaction that was canceled, the reason for cancellation.

        "1" - Customer canceled their transaction due to an actual or perceived issue within your app.
        "0" - Transaction was canceled for another reason, for example, if the customer made the purchase accidentally.

        Use this value along with the cancellation date to identify possible issues in your app that may lead customers to contact Apple customer support.
     */
    cancellation_reason?: '0' | '1';
    /*
        App Item ID
        A string that the App Store uses to uniquely identify the application that created the transaction.
     */
    app_item_id: string;
}

/*
    https://developer.apple.com/documentation/storekit/original_api_for_in-app_purchase/validating_receipts_with_the_app_store#//apple_ref/doc/uid/TP40010573-CH104-SW1
    https://developer.apple.com/documentation/appstorereceipts/responsebody/
*/
export interface IReceiptValidationResponseBody {
    /*
        Either 0 if the receipt is valid, or a status code if there is an error.
        The status code reflects the status of the app receipt as a whole. See status for possible status codes and descriptions.
     */
    status: RECEIPT_STATUS_ENUM;
    /*
        The environment for which the receipt was generated.
        Possible values: Sandbox, Production
     */
    environment: 'Sandbox' | 'Production';
    /*
        A JSON representation of the receipt that was sent for verification.
     */
    receipt: IReceipt;
    /*
        The latest Base64 encoded app receipt. Only returned for receipts that contain auto-renewable subscriptions.
     */
    latest_receipt: string;
    /*
        An array that contains all in-app purchase transactions. This excludes transactions for consumable products that have been marked as finished by your app. Only returned for receipts that contain auto-renewable subscriptions.
     */
    latest_receipt_info: IReceiptInAppItem[];
    /*
        An indicator that an error occurred during the request.
        A value of 1 indicates a temporary issue; retry validation for this receipt at a later time.
        A value of 0 indicates an unresolvable issue; do not retry validation for this receipt. Only applicable to status codes 21100-21199.
     */
    'is-retryable': boolean;
}
